server:
  port: 8080



    # this is oens all the api gatewayy for aps to connect
#  endpoints:
#    web:
#      exposure:
#        include: "*"
  # this is for the API gateway route  define which api goes where
#  this i spring cloud gateway server and mvc code https://github.com/spring-cloud/spring-cloud-gateway/blob/main/spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/predicate/GatewayRequestPredicates.java
# implement spring clod gateway https://cloud.spring.io/spring-cloud-gateway/reference/html/#gateway-starter
spring:
  application:
    name: APIgatewayCLIENTMemory
  cloud:
    gateway:
      MVC:
        enabled: true  # this is for the MVC https://docs.spring.io/spring-cloud-gateway/reference/spring-cloud-gateway-server-mvc/filters/tokenrelay.html
        default-filters:
          - TokenRelay=
        routes:
#          - id: AUTHSERVER0
#            uri: http://amberex-HP:9000
#            #          uri: lb://UserInterface
#            predicates:
#              - Path=/oauth2/**
#
#          - id: AUTHSERVER1
#            uri: http://amberex-HP:9000
#            #          uri: lb://UserInterface
#            predicates:
#              - Path=/login

          - id: AUTHSERVER2
            uri: ${SecurityIssuerUri:http://amberex-HP:9000}
            #          uri: lb://UserInterface
            predicates:
              - Path=/consent

          - id: UserInterface
            uri: ${UserInterfaceUrl:http://localhost:8766}
            #          uri: lb://UserInterface
            predicates:
              - Path=/api/v1/consumers/**
#            filters:
#              - SetPath=/api/v1/consumers/**

          - id: BarberDashboard
            uri: ${BarberDashboardUrl:http://localhost:8767}
            #          uri: lb://BarberDashboard
            predicates:
              - Path=/api/v1/services/**
#            filters:
#              - SetPath=/api/v1/services/**

          - id: notification-service
            uri: ${notificationServiceUrl:http://localhost:8040}
            #          uri: lb://notification-service
            predicates:
              - Path=/api/v1/notifications/**
          - id: order-service
            uri: ${orderServiceUrl:http://localhost:8070}
            #          uri: lb://order-service
            predicates:
              - Path=/api/v1/notifications/**
          - id: payment-service
            uri: ${paymentService:http://localhost:8060}
            #          uri: lb://payment-service
            predicates:
              - Path=/api/v1/payments/**

#          - id: APIgatewayCLIENT
#            uri: http://localhost:8080
#            predicates:
#              - Path=/**
              #          filters:
#              - SetPath=/AUTHCLIENT/

  security:
    oauth2:
      client:
        registration:
          api-client-oidc:
            provider: spring
            client-id: api-client
            client-secret: secret
            authorization-grant-type: authorization_code    # redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"  "http://127.0.0.1:8080/login/oauth2/code/api-client-oidc"
            redirect-uri: ${RedirectUriOidc:"http://127.0.0.1:8080/login/oauth2/code/{registrationId}"}   #"http://127.0.0.1:8080/login/oauth2/code/{registrationId}"
            scope: openid      #/oauth2/authorization/api-client-oidc
#            scope: openid,email,profile
            client-name: api-client-oidc
          api-client-authorization-code:
            provider: spring
            client-id: api-client
            client-secret: secret
            authorization-grant-type: authorization_code
            redirect-uri: ${RedirectUriCode:"http://127.0.0.1:8080/authorized"}
            scope: api.read
            client-name: api-client-authorization-code
        provider:
          spring:
            issuer-uri: ${SecurityIssuerUri:http://amberex-HP:9000}

  datasource:
    driver-class-name: org.postgresql.Driver
    url: ${PostgresUrl:jdbc:postgresql://localhost:5432/barbershop}
#    url: jdbc:postgresql://localhost:5432/barbershop
    username: postgres
    password: password
  jpa:
    hibernate:
      ddl-auto: create-drop
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect


# Eureka registration
eureka:
  client:
    serviceUrl:
      defaultZone: ${EurekaUrl:http://localhost:8761/eureka}







  #    for dockeridsation    include: prometheus # this is for zipkin
management:
  tracing:
    sampling:
      probability: 0.8
  endpoints:
    web:
      exposure:
        include: "*"
  #        include: prometheus
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans/



logging:
  level:
    root:
      root: INFO
    org:
      springframework:
        cloud:
          gateway:
            route:
              RouteDefinitionLocator: INFO




        # this is use when configurer is used
        # https://medium.com/@ankithahjpgowda/api-gateway-in-spring-boot-3ea804003021#:~:text=API%20Gateway%20%E2%80%94%20receives%20incoming%20requests,that%20takes%20care%20of%20authentication
#spring:
#  application:
#    name: API-gateway
#  config:
#    import: "optional: configserver: http://localhost:8088"




